1   背包ui
背景，标题 ，关闭背包按钮，grid ---slot(存放物体的小图标)，文字描述

2  物品数据，
新建立一个物品数据（包括名称，形状，描述，），一个背包数据，然后在建立一个脚本（OnItemWait）放到物品上，然后把物品数据挂接到脚本上，并且判断发生碰撞后应该执行哪些操作，比如判断背包是否有这个物品，没有添加到背包，有背包数量加一
创建slot脚本，包含物体名称，形状，描述。


3 把物品数据传送到背包ui
创建背包管理代码，然后把背包ui的界面声明出来（列如物品描述，物品数量，物品所占的位置，），创建一个方法来实现物品的生成，（方法：把物品所占背包的位置实例化，然后把item里的物品转移到slot，然后再背包管理中实例化出来，在slot脚本中使用背包管理中的创建物品，在slot中实例化出来。）
4，碰到相同的物体，数量相加
思路，因为碰到相同的物体，数量相加，但是没有在ui上显示出来，所以，先清除背包的所有物品，在创建所有物体，因为创建物体的时候，数量已经包含在里面了。
新建一个方法，先循环清除物体，循环次数等于slot的子集个数（instance。slotgrid。transform。childcount）
判断子集个数是否为零，为零跳出，否则 销毁子集  Destroy(instance.slotGrid.transform.GetChild(i).gameObject);
生成物品，先判断背包里面有几个子集， 然后在创建物品。CreatItem(instance.myBag.itemList[i]);