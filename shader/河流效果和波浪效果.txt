Shader "Hidden/Wave"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _Aranger("Amplitule",float)=1
        _Frenquncy("Frequney",float)=0.5
         _Speed("_Speed",float)=0.5
    }
    SubShader
    {
        

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            float    _Frenquncy;
            float    _Aranger;
            float    _Speed;
            

            v2f vert (appdata v)
            {
                v2f o;

                                                        //sin(wΠ+α)；波浪效果
                                                       float timer=_Time.y*_Speed;

                                                        float waver=_Aranger*sin(timer+v.vertex.x *_Frenquncy);
                                                           v.vertex.y=v.vertex.y+waver;
                     


                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            sampler2D _MainTex;

           //片段着色器的入口函数

            fixed4 frag (v2f i) : SV_Target
            {
                                                                      //河流效果
                                                                  float2 tempuv=i.uv;
                                                                 tempuv.x+=_Time.x;
                                                                  tempuv.y+=_Time.y;
                                                                 fixed4 col = tex2D(_MainTex, tempuv);

                // just invert the colors
                //col.rgb = 1 - col.rgb;
                return col;
            }
            ENDCG
        }
    }
}
