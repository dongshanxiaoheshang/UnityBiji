

Loading

1，纹理旋转就是UV旋转
2，UV用矩阵的方式旋转起来。


矩阵旋转的注意事项：
1，将物体平移到原点
2，实现旋转
3，将物体平移到原来的位置。



Shader "Hidden/Loading"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _Speed("Speed",float)=2//给定一个旋转速度
    }
    SubShader
    {
        // No culling or depth
       // Cull Off ZWrite Off ZTest Always
       Blend SrcAlpha OneMinusSrcAlpha
        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };
            //
            float _Speed; //声明旋转速度

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }



            sampler2D _MainTex;

            fixed4 frag (v2f i) : SV_Target
            {
                float2 tempUV=i.uv;

              
                tempUV -= float2(0.5,0.5);    //将物体平移

                if(length(tempUV)>0.5){
                    return fixed4(0,0,0,0);
                }

                float2   finalUV = 0;
                float  angle=_Time.x*_Speed;

                finalUV.x=  tempUV.x * cos(angle) - tempUV.y * sin(angle);           //物体的旋转
                finalUV.y= tempUV.x *sin(angle) + tempUV.y* cos(angle);

                tempUV += float2(0.5,0.5);              //物体平移到原来的位置

                fixed4 col = tex2D(_MainTex, finalUV);
                // just invert the colors
              //  col.rgb = 1 - col.rgb;
                  
              //alpha测试
              //if(col.a<0.5){
              //      return fixed4(0,0,0,0);
              //}
              //else{
              //      return col;
              //}
              //  return col;
                return col;
            }
            ENDCG
        }
    }
}
